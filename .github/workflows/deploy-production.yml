name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: ai-roadtrip-storyteller-production
  REPOSITORY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/roadtrip-images/app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure Workload Identity Federation and generate an access token
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    # Setup gcloud CLI
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    # Configure Docker to use the gcloud command-line tool as a credential helper
    - name: Configure Docker
      run: |-
        gcloud auth configure-docker ${{ env.REGISTRY }}

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    # Run tests
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=backend --cov-report=xml
      env:
        TESTING: true
        DATABASE_URL: sqlite:///./test.db

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -m "not live"
      env:
        TESTING: true
        DATABASE_URL: sqlite:///./test.db

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Build the Docker image
    - name: Build Docker image
      run: |-
        docker build \
          --tag "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:${{ github.sha }}" \
          --tag "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:latest" \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:latest" \
          .

    # Push the Docker image to Google Artifact Registry
    - name: Push Docker image
      run: |-
        docker push "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:${{ github.sha }}"
        docker push "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:latest"

    # Update image in Kubernetes manifests
    - name: Update Kubernetes manifests
      run: |-
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/k8s/deployment-api.yaml
        sed -i "s|PROJECT_ID|${{ env.PROJECT_ID }}|g" infrastructure/k8s/*.yaml

    # Deploy to GKE
    - name: Deploy to GKE
      run: |-
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/service-account.yaml
        kubectl apply -f infrastructure/k8s/deployment-api.yaml
        kubectl apply -f infrastructure/k8s/deployment-celery.yaml
        kubectl apply -f infrastructure/k8s/hpa.yaml
        kubectl apply -f infrastructure/k8s/ingress.yaml
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n production --timeout=10m

    # Run smoke tests
    - name: Run smoke tests
      run: |
        INGRESS_IP=$(kubectl get ingress roadtrip-ingress -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Testing API at IP: $INGRESS_IP"
        
        # Wait for service to be ready
        for i in {1..60}; do
          if curl -f -s -o /dev/null -w "%{http_code}" "http://$INGRESS_IP/health" | grep -q "200"; then
            echo "Service is healthy"
            break
          fi
          echo "Waiting for service to be ready... ($i/60)"
          sleep 5
        done
        
        # Run basic smoke tests
        curl -f "http://$INGRESS_IP/health"
        curl -f "http://$INGRESS_IP/ready"
        curl -f "http://$INGRESS_IP/api/v1/stories/test"

    # Send deployment notification
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.head_commit.message }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    # Create release notes
    - name: Create Release
      if: success() && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}
          - Message: ${{ github.event.head_commit.message }}
          
          ## Docker Image
          `${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/roadtrip-docker/${{ env.IMAGE }}:${{ github.sha }}`
        draft: false
        prerelease: false