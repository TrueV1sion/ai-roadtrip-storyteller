version: '3.8'

# Production Docker Compose Configuration
# For local testing of production setup

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    image: roadtrip-backend:production
    container_name: roadtrip-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Core settings
      - ENVIRONMENT=production
      - PORT=8000
      - LOG_LEVEL=INFO
      - WORKERS=4
      
      # Security
      - FORCE_HTTPS=true
      - SECURE_COOKIES=true
      - ALLOWED_HOSTS=roadtrip-backend-*.a.run.app,localhost
      
      # Database (using local for testing)
      - DATABASE_URL=postgresql://roadtrip_prod:${DB_PASSWORD}@postgres:5432/roadtrip_production
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Feature flags
      - ENABLE_MONITORING=true
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  postgres:
    image: postgres:15-alpine
    container_name: roadtrip-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=roadtrip_production
      - POSTGRES_USER=roadtrip_prod
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.utf8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - roadtrip-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U roadtrip_prod -d roadtrip_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: roadtrip-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - roadtrip-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: roadtrip-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
    networks:
      - roadtrip-prod
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: roadtrip-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: roadtrip-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  alertmanager:
    image: prom/alertmanager:latest
    container_name: roadtrip-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: roadtrip-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yml
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Database backup service
  backup:
    build:
      context: .
      dockerfile: infrastructure/docker/backup.Dockerfile
    container_name: roadtrip-backup
    restart: "no"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://roadtrip_prod:${DB_PASSWORD}@postgres:5432/roadtrip_production
      - BACKUP_BUCKET=roadtrip-backups-production
      - RETENTION_DAYS=30
    volumes:
      - backup_data:/backups
      - ./agent_taskforce/tools/database_backup.py:/app/database_backup.py:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - roadtrip-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  nginx_cache:
    driver: local
  backup_data:
    driver: local

networks:
  roadtrip-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16