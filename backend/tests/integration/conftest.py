"""
Configuration for integration tests
"""

import pytest
import asyncio
import os
from unittest.mock import patch
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from app.core.database import Base
from app.core.config import settings


@pytest.fixture(scope="session")
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="session")
def test_database():
    """Create a test database for integration tests"""
    # Use in-memory SQLite for tests
    SQLALCHEMY_TEST_DATABASE_URL = "sqlite:///:memory:"
    
    engine = create_engine(
        SQLALCHEMY_TEST_DATABASE_URL,
        connect_args={"check_same_thread": False}
    )
    
    # Create all tables
    Base.metadata.create_all(bind=engine)
    
    TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    yield TestingSessionLocal
    
    # Cleanup
    Base.metadata.drop_all(bind=engine)


@pytest.fixture(autouse=True)
def mock_external_services():
    """Mock external services for integration tests"""
    
    # Mock Google Cloud services
    with patch('google.cloud.aiplatform.init'):
        with patch('vertexai.init'):
            # Mock Redis
            with patch('redis.Redis.from_url') as mock_redis:
                mock_redis.return_value.ping.return_value = True
                mock_redis.return_value.get.return_value = None
                mock_redis.return_value.set.return_value = True
                
                # Mock external APIs
                with patch.dict(os.environ, {
                    'GOOGLE_CLOUD_PROJECT': 'test-project',
                    'VERTEX_AI_LOCATION': 'us-central1',
                    'DATABASE_URL': 'sqlite:///:memory:',
                    'REDIS_URL': 'redis://localhost:6379',
                    'JWT_SECRET_KEY': 'test-secret-key',
                    'TICKETMASTER_API_KEY': 'test-key',
                    'OPENWEATHERMAP_API_KEY': 'test-key',
                    'GOOGLE_MAPS_API_KEY': 'test-key'
                }):
                    yield


@pytest.fixture
def mock_ai_client():
    """Mock AI client for tests"""
    from unittest.mock import AsyncMock
    
    mock_client = AsyncMock()
    mock_client.generate_story.return_value = "Test story generated by AI"
    mock_client.generate_completion.return_value = "Test completion"
    
    return mock_client


@pytest.fixture
def auth_headers():
    """Generate auth headers for protected endpoints"""
    import jwt
    from datetime import datetime, timedelta
    
    # Generate test JWT token
    payload = {
        "sub": "test@example.com",
        "exp": datetime.utcnow() + timedelta(hours=1),
        "iat": datetime.utcnow(),
        "jti": "test-jwt-id"
    }
    
    token = jwt.encode(payload, "test-secret-key", algorithm="HS256")
    
    return {"Authorization": f"Bearer {token}"}


@pytest.fixture
def test_user_data():
    """Test user data for integration tests"""
    return {
        "email": "integration@roadtrip.ai",
        "password": "TestPassword123!",
        "name": "Integration Tester"
    }


@pytest.fixture
def test_location_data():
    """Test location data for integration tests"""
    return {
        "latitude": 37.7749,
        "longitude": -122.4194,
        "city": "San Francisco",
        "state": "CA",
        "country": "USA"
    }


@pytest.fixture
def test_story_context():
    """Test story generation context"""
    return {
        "user_query": "Tell me about the Golden Gate Bridge",
        "location": {
            "lat": 37.8199,
            "lng": -122.4783,
            "name": "Golden Gate Bridge"
        },
        "user_preferences": {
            "story_types": ["historical", "engineering"],
            "personality": "david_attenborough"
        },
        "driving_context": {
            "speed": 25,
            "weather": "clear",
            "time_of_day": "afternoon"
        }
    }