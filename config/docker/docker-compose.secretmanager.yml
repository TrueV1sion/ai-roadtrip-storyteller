version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: roadtrip-db
    environment:
      POSTGRES_USER: ${DB_USER:-roadtrip}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-roadtrip_dev}
      POSTGRES_DB: ${DB_NAME:-roadtrip}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-roadtrip}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: roadtrip-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API with Secret Manager
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: roadtrip-backend
    environment:
      # Google Cloud Project (required for Secret Manager)
      GOOGLE_AI_PROJECT_ID: ${GOOGLE_AI_PROJECT_ID}
      
      # Enable Secret Manager
      USE_SECRET_MANAGER: "true"
      
      # Non-secret configuration
      APP_VERSION: ${APP_VERSION:-1.0.0}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      TEST_MODE: ${TEST_MODE:-live}
      
      # Service URLs (structure not secret)
      REDIS_URL: redis://redis:6379
      
      # Google Cloud settings
      GOOGLE_AI_LOCATION: ${GOOGLE_AI_LOCATION:-us-central1}
      GOOGLE_AI_MODEL: ${GOOGLE_AI_MODEL:-gemini-1.5-flash}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS:-./credentials.json}:/app/credentials.json:ro
    environment:
      # Mount credentials if using service account
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials.json
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: roadtrip-prometheus
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - backend

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: roadtrip-grafana
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: