# Google Cloud Build configuration for Knowledge Graph Service
# Deploys the knowledge graph as a separate Cloud Run service

substitutions:
  _SERVICE_NAME: roadtrip-knowledge-graph
  _REGION: us-central1
  _MEMORY: 2Gi
  _CPU: '2'
  _MAX_INSTANCES: '10'
  _MIN_INSTANCES: '1'
  _CONCURRENCY: '50'
  _SERVICE_ACCOUNT: roadtrip-kg@${PROJECT_ID}.iam.gserviceaccount.com
  _IMAGE_NAME: gcr.io/${PROJECT_ID}/roadtrip-knowledge-graph
  _TIMEOUT: '300s'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY
  substitution_option: 'ALLOW_LOOSE'

steps:
  # Step 1: Create service account if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'setup-service-account'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud iam service-accounts describe ${_SERVICE_ACCOUNT} 2>/dev/null; then
          echo "Creating service account ${_SERVICE_ACCOUNT}..."
          gcloud iam service-accounts create roadtrip-kg \
            --display-name="RoadTrip Knowledge Graph Service Account"
        fi
        
        # Grant necessary IAM roles
        echo "Granting IAM roles..."
        for role in \
          "roles/storage.objectViewer" \
          "roles/cloudtrace.agent" \
          "roles/monitoring.metricWriter" \
          "roles/logging.logWriter"
        do
          gcloud projects add-iam-policy-binding ${PROJECT_ID} \
            --member="serviceAccount:${_SERVICE_ACCOUNT}" \
            --role="${role}" \
            --condition=None
        done
    timeout: '300s'

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '--cache-from'
      - '${_IMAGE_NAME}:latest'
      - '-t'
      - '${_IMAGE_NAME}:${BUILD_ID}'
      - '-t'
      - '${_IMAGE_NAME}:latest'
      - '-t'
      - '${_IMAGE_NAME}:${SHORT_SHA}'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '-f'
      - 'knowledge_graph/Dockerfile'
      - 'knowledge_graph'
    timeout: '600s'

  # Step 3: Run security scanning
  - name: 'aquasec/trivy'
    id: 'security-scan'
    args:
      - 'image'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--exit-code'
      - '0'  # Don't fail on vulnerabilities for KG
      - '--no-progress'
      - '${_IMAGE_NAME}:${BUILD_ID}'
    waitFor: ['build-image']
    timeout: '300s'

  # Step 4: Push image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - '${_IMAGE_NAME}'
    waitFor: ['security-scan']
    timeout: '300s'

  # Step 5: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_SERVICE_NAME} \
          --image=${_IMAGE_NAME}:${BUILD_ID} \
          --region=${_REGION} \
          --platform=managed \
          --memory=${_MEMORY} \
          --cpu=${_CPU} \
          --timeout=${_TIMEOUT} \
          --concurrency=${_CONCURRENCY} \
          --max-instances=${_MAX_INSTANCES} \
          --min-instances=${_MIN_INSTANCES} \
          --service-account=${_SERVICE_ACCOUNT} \
          --allow-unauthenticated \
          --port=8000 \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="LOG_LEVEL=INFO" \
          --set-env-vars="AUTO_ANALYZE=true" \
          --set-env-vars="CODEBASE_PATH=/app/codebase" \
          --set-env-vars="CACHE_TTL=3600" \
          --set-env-vars="MAX_DEPTH=5" \
          --vpc-connector="projects/${PROJECT_ID}/locations/${_REGION}/connectors/roadtrip-connector" \
          --vpc-egress=private-ranges-only \
          --labels="environment=production,app=roadtrip,component=knowledge-graph" \
          --tag="latest" \
          --no-traffic
    waitFor: ['push-image']
    timeout: '600s'

  # Step 6: Health check and traffic migration
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting service URL..."
        KG_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.address.url)')
        
        echo "Knowledge Graph URL: $KG_URL"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        for i in {1..10}; do
          if curl -f -s -o /dev/null -w "%{http_code}" "${KG_URL}/api/health" | grep -q "200"; then
            echo "Health check passed on attempt $i"
            break
          else
            echo "Health check failed on attempt $i, retrying in 10s..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "Health checks failed after 10 attempts"
            exit 1
          fi
        done
        
        # Shift 100% traffic to new revision
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --region=${_REGION} \
          --to-latest
        
        echo "Knowledge Graph deployment complete!"
        echo "Service URL: $KG_URL"
    waitFor: ['deploy']
    timeout: '300s'

timeout: 1800s