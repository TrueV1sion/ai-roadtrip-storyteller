from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, validator


class SideQuestStatus(str, Enum):
    """Status of a side quest."""
    AVAILABLE = "available"
    ACCEPTED = "accepted"
    COMPLETED = "completed"
    SKIPPED = "skipped"
    EXPIRED = "expired"


class SideQuestDifficulty(str, Enum):
    """Difficulty level of a side quest."""
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class SideQuestCategory(str, Enum):
    """Category of a side quest."""
    HISTORICAL = "historical"
    NATURAL = "natural"
    CULTURAL = "cultural"
    CULINARY = "culinary"
    ENTERTAINMENT = "entertainment"
    ADVENTURE = "adventure"
    HIDDEN_GEM = "hidden_gem"
    SCENIC = "scenic"
    EDUCATIONAL = "educational"
    QUIRKY = "quirky"


class SideQuestCategoryBase(BaseModel):
    """Base model for side quest category data."""
    name: str = Field(..., description="Name of the category")
    description: Optional[str] = Field(None, description="Description of the category")
    icon_url: Optional[str] = Field(None, description="URL to the category icon")
    color: Optional[str] = Field(None, description="Hex color code for the category")


class SideQuestCategoryCreate(SideQuestCategoryBase):
    """Schema for creating a side quest category."""
    id: str = Field(..., description="ID of the category (used as the enum value)")


class SideQuestCategoryUpdate(BaseModel):
    """Schema for updating a side quest category."""
    name: Optional[str] = None
    description: Optional[str] = None
    icon_url: Optional[str] = None
    color: Optional[str] = None


class SideQuestCategoryResponse(SideQuestCategoryBase):
    """Schema for side quest category responses."""
    id: str
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


class SideQuestBase(BaseModel):
    """Base model for side quest data."""
    title: str = Field(..., description="Title of the side quest")
    description: str = Field(..., description="Description of the side quest")
    latitude: float = Field(..., description="Latitude of the location")
    longitude: float = Field(..., description="Longitude of the location")
    location_name: Optional[str] = Field(None, description="Name of the location")
    address: Optional[str] = Field(None, description="Address of the location")
    category: Optional[str] = Field(None, description="Category ID")
    difficulty: Optional[str] = Field(None, description="Difficulty level")
    estimated_duration: Optional[int] = Field(None, description="Estimated duration in minutes")
    distance_from_route: Optional[float] = Field(None, description="Distance from route in kilometers")
    detour_time: Optional[int] = Field(None, description="Detour time in minutes")
    uniqueness_score: Optional[float] = Field(None, description="Uniqueness score (0-100)")
    image_url: Optional[str] = Field(None, description="URL to an image")
    thumbnail_url: Optional[str] = Field(None, description="URL to a thumbnail")
    external_id: Optional[str] = Field(None, description="ID from an external system")
    external_rating: Optional[float] = Field(None, description="Rating from an external system")
    external_url: Optional[str] = Field(None, description="URL to an external listing")
    requirements: Optional[Dict[str, Any]] = Field(None, description="Requirements to complete the quest")
    rewards: Optional[Dict[str, Any]] = Field(None, description="Rewards for completing the quest")
    tags: Optional[List[str]] = Field(None, description="Tags for filtering")
    operating_hours: Optional[Dict[str, Any]] = Field(None, description="Operating hours")
    price_level: Optional[int] = Field(None, description="Price level (1-4)")
    is_seasonal: Optional[bool] = Field(False, description="Whether the side quest is seasonal")
    seasonal_start: Optional[datetime] = Field(None, description="Start date for seasonal side quests")
    seasonal_end: Optional[datetime] = Field(None, description="End date for seasonal side quests")


class SideQuestCreate(SideQuestBase):
    """Schema for creating a side quest."""
    is_verified: Optional[bool] = Field(False, description="Whether the side quest is verified by an admin")
    is_user_generated: Optional[bool] = Field(False, description="Whether the side quest was generated by a user")
    is_active: Optional[bool] = Field(True, description="Whether the side quest is active")
    source: Optional[str] = Field(None, description="Source of the side quest")


class SideQuestUpdate(BaseModel):
    """Schema for updating a side quest."""
    title: Optional[str] = None
    description: Optional[str] = None
    location_name: Optional[str] = None
    address: Optional[str] = None
    category: Optional[str] = None
    difficulty: Optional[str] = None
    estimated_duration: Optional[int] = None
    distance_from_route: Optional[float] = None
    detour_time: Optional[int] = None
    uniqueness_score: Optional[float] = None
    image_url: Optional[str] = None
    thumbnail_url: Optional[str] = None
    external_id: Optional[str] = None
    external_rating: Optional[float] = None
    external_url: Optional[str] = None
    requirements: Optional[Dict[str, Any]] = None
    rewards: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    operating_hours: Optional[Dict[str, Any]] = None
    price_level: Optional[int] = None
    is_verified: Optional[bool] = None
    is_active: Optional[bool] = None
    is_seasonal: Optional[bool] = None
    seasonal_start: Optional[datetime] = None
    seasonal_end: Optional[datetime] = None


class SideQuestResponse(SideQuestBase):
    """Schema for side quest responses."""
    id: str
    is_verified: bool
    is_user_generated: bool
    is_active: bool
    created_by: Optional[str] = None
    source: Optional[str] = None
    created_at: datetime
    updated_at: datetime
    category_details: Optional[SideQuestCategoryResponse] = None

    class Config:
        orm_mode = True


class UserSideQuestBase(BaseModel):
    """Base model for user side quest data."""
    side_quest_id: str = Field(..., description="ID of the side quest")
    status: Optional[SideQuestStatus] = Field(SideQuestStatus.AVAILABLE, description="Status of the side quest")
    progress: Optional[int] = Field(0, description="Progress percentage")
    user_rating: Optional[int] = Field(None, description="User rating (1-5)")
    feedback: Optional[str] = Field(None, description="User feedback")
    trip_id: Optional[str] = Field(None, description="Associated trip ID")


class UserSideQuestCreate(UserSideQuestBase):
    """Schema for creating a user side quest."""
    pass


class UserSideQuestUpdate(BaseModel):
    """Schema for updating a user side quest."""
    status: Optional[str] = None
    progress: Optional[int] = None
    user_rating: Optional[int] = None
    feedback: Optional[str] = None


class UserSideQuestResponse(UserSideQuestBase):
    """Schema for user side quest responses."""
    id: str
    user_id: str
    completed_at: Optional[datetime] = None
    skipped_at: Optional[datetime] = None
    recommended_at: Optional[datetime] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


class UserSideQuestDetailResponse(UserSideQuestResponse):
    """Schema for detailed user side quest responses."""
    side_quest: Optional[SideQuestResponse] = None

    class Config:
        orm_mode = True


class NearbyQuestRequest(BaseModel):
    """Schema for requesting nearby side quests."""
    latitude: float = Field(..., description="Latitude of the center point")
    longitude: float = Field(..., description="Longitude of the center point")
    radius: Optional[float] = Field(10.0, description="Search radius in kilometers")
    limit: Optional[int] = Field(20, description="Maximum number of results to return")
    categories: Optional[List[str]] = Field(None, description="List of category IDs to filter by")
    difficulty: Optional[str] = Field(None, description="Difficulty level to filter by")
    max_detour_time: Optional[int] = Field(None, description="Maximum detour time in minutes")
    min_uniqueness: Optional[float] = Field(None, description="Minimum uniqueness score (0-100)")
    include_inactive: Optional[bool] = Field(False, description="Include inactive side quests")
    include_seasonal: Optional[bool] = Field(True, description="Include out-of-season side quests")


class RouteQuestRequest(BaseModel):
    """Schema for requesting side quests along a route."""
    route_id: str = Field(..., description="ID of the route")
    max_distance: Optional[float] = Field(5.0, description="Maximum distance from the route in kilometers")
    limit: Optional[int] = Field(20, description="Maximum number of results to return")
    categories: Optional[List[str]] = Field(None, description="List of category IDs to filter by")
    difficulty: Optional[str] = Field(None, description="Difficulty level to filter by")
    max_detour_time: Optional[int] = Field(None, description="Maximum detour time in minutes")
    min_uniqueness: Optional[float] = Field(None, description="Minimum uniqueness score (0-100)")
    include_inactive: Optional[bool] = Field(False, description="Include inactive side quests")
    include_seasonal: Optional[bool] = Field(True, description="Include out-of-season side quests")


class RecommendQuestRequest(BaseModel):
    """Schema for recommending side quests."""
    route_id: str = Field(..., description="ID of the route")
    current_location: Optional[Dict[str, float]] = Field(None, description="Current location (lat/lng)")
    user_interests: Optional[List[str]] = Field(None, description="List of user interests")
    available_time: Optional[int] = Field(None, description="Available time in minutes")
    count: Optional[int] = Field(3, description="Number of side quests to recommend")
    trip_id: Optional[str] = Field(None, description="Trip ID for grouping")