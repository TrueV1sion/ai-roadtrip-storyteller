from sqlalchemy import Column, String, DateTime, Boolean, ForeignKey, JSON, Integer, Float, Text, Enum
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import enum
import uuid

from app.db.base import Base


class SideQuestStatus(str, enum.Enum):
    """Status of a side quest."""
    AVAILABLE = "available"
    ACCEPTED = "accepted"
    COMPLETED = "completed"
    SKIPPED = "skipped"
    EXPIRED = "expired"


class SideQuestDifficulty(str, enum.Enum):
    """Difficulty level of a side quest."""
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class SideQuestCategory(str, enum.Enum):
    """Category of a side quest."""
    HISTORICAL = "historical"
    NATURAL = "natural"
    CULTURAL = "cultural"
    CULINARY = "culinary"
    ENTERTAINMENT = "entertainment"
    ADVENTURE = "adventure"
    HIDDEN_GEM = "hidden_gem"
    SCENIC = "scenic"
    EDUCATIONAL = "educational"
    QUIRKY = "quirky"


class SideQuest(Base):
    """Side Quest model for exploration opportunities."""
    __tablename__ = "side_quests"

    id = Column(String, primary_key=True, index=True, default=lambda: str(uuid.uuid4()))
    title = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    
    # Location data
    latitude = Column(Float, nullable=False)
    longitude = Column(Float, nullable=False)
    location_name = Column(String, nullable=True)
    address = Column(String, nullable=True)
    
    # Quest details
    category = Column(String, ForeignKey("side_quest_categories.id"), nullable=True)
    difficulty = Column(String, nullable=True)
    estimated_duration = Column(Integer, nullable=True)  # In minutes
    distance_from_route = Column(Float, nullable=True)  # In kilometers
    detour_time = Column(Integer, nullable=True)  # Additional time in minutes
    uniqueness_score = Column(Float, nullable=True)  # Score from 0-100
    
    # Media
    image_url = Column(String, nullable=True)
    thumbnail_url = Column(String, nullable=True)
    
    # External references
    external_id = Column(String, nullable=True)  # ID from external system (Google, Yelp, etc.)
    external_rating = Column(Float, nullable=True)  # Rating from external system
    external_url = Column(String, nullable=True)  # URL to external listing
    
    # Side quest metadata
    requirements = Column(JSON, nullable=True)  # Requirements to complete the quest
    rewards = Column(JSON, nullable=True)  # Rewards for completing the quest
    tags = Column(JSON, nullable=True)  # Tags for filtering
    operating_hours = Column(JSON, nullable=True)  # Operating hours if applicable
    price_level = Column(Integer, nullable=True)  # Price level (1-4)
    
    # Flags
    is_verified = Column(Boolean, default=False)  # Verified by admin
    is_user_generated = Column(Boolean, default=False)  # Generated by a user
    is_active = Column(Boolean, default=True)  # Active and available
    is_seasonal = Column(Boolean, default=False)  # Only available during certain times
    seasonal_start = Column(DateTime, nullable=True)  # Start of seasonal availability
    seasonal_end = Column(DateTime, nullable=True)  # End of seasonal availability
    
    # Creation and source
    created_by = Column(String, ForeignKey("users.id", ondelete="SET NULL"), nullable=True)
    source = Column(String, nullable=True)  # Source of the side quest (API, user, admin)
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Relationships
    category_relation = relationship("SideQuestCategory", back_populates="side_quests")
    creator = relationship("User", foreign_keys=[created_by])
    user_quests = relationship("UserSideQuest", back_populates="side_quest", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<SideQuest {self.id}: {self.title}>"
    
    def to_dict(self):
        """Convert side quest to dictionary."""
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "latitude": self.latitude,
            "longitude": self.longitude,
            "location_name": self.location_name,
            "address": self.address,
            "category": self.category,
            "difficulty": self.difficulty,
            "estimated_duration": self.estimated_duration,
            "distance_from_route": self.distance_from_route,
            "detour_time": self.detour_time,
            "uniqueness_score": self.uniqueness_score,
            "image_url": self.image_url,
            "thumbnail_url": self.thumbnail_url,
            "external_id": self.external_id,
            "external_rating": self.external_rating,
            "external_url": self.external_url,
            "requirements": self.requirements,
            "rewards": self.rewards,
            "tags": self.tags,
            "operating_hours": self.operating_hours,
            "price_level": self.price_level,
            "is_verified": self.is_verified,
            "is_user_generated": self.is_user_generated,
            "is_active": self.is_active,
            "is_seasonal": self.is_seasonal,
            "seasonal_start": self.seasonal_start.isoformat() if self.seasonal_start else None,
            "seasonal_end": self.seasonal_end.isoformat() if self.seasonal_end else None,
            "created_by": self.created_by,
            "source": self.source,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class SideQuestCategory(Base):
    """Categories for side quests."""
    __tablename__ = "side_quest_categories"
    
    id = Column(String, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    icon_url = Column(String, nullable=True)
    color = Column(String, nullable=True)  # Hex color code
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Relationships
    side_quests = relationship("SideQuest", back_populates="category_relation")
    
    def __repr__(self):
        return f"<SideQuestCategory {self.id}: {self.name}>"


class UserSideQuest(Base):
    """User's relationship with side quests."""
    __tablename__ = "user_side_quests"
    
    id = Column(String, primary_key=True, index=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    side_quest_id = Column(String, ForeignKey("side_quests.id", ondelete="CASCADE"), nullable=False)
    
    # Status and progress
    status = Column(String, default=SideQuestStatus.AVAILABLE.value, nullable=False)
    progress = Column(Integer, default=0)  # Percentage of completion
    completed_at = Column(DateTime, nullable=True)
    skipped_at = Column(DateTime, nullable=True)
    
    # Feedback and rating
    user_rating = Column(Integer, nullable=True)  # 1-5 stars
    feedback = Column(Text, nullable=True)
    
    # Context
    trip_id = Column(String, nullable=True)  # Associated trip if applicable
    recommended_at = Column(DateTime, nullable=True)  # When it was recommended
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Relationships
    user = relationship("User", backref="side_quests")
    side_quest = relationship("SideQuest", back_populates="user_quests")
    
    def __repr__(self):
        return f"<UserSideQuest {self.user_id} - {self.side_quest_id}: {self.status}>"
    
    def to_dict(self):
        """Convert user side quest to dictionary."""
        return {
            "id": self.id,
            "user_id": self.user_id,
            "side_quest_id": self.side_quest_id,
            "status": self.status,
            "progress": self.progress,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
            "skipped_at": self.skipped_at.isoformat() if self.skipped_at else None,
            "user_rating": self.user_rating,
            "feedback": self.feedback,
            "trip_id": self.trip_id,
            "recommended_at": self.recommended_at.isoformat() if self.recommended_at else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }