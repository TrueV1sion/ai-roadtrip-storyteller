name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: roadtrip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: pytest tests/unit -v --junit-xml=test-results/unit.xml
      env:
        DATABASE_URL: postgresql://test:test@localhost/roadtrip_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: pytest tests/integration -v --junit-xml=test-results/integration.xml
      env:
        DATABASE_URL: postgresql://test:test@localhost/roadtrip_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run e2e tests
      run: pytest tests/e2e -v --junit-xml=test-results/e2e.xml
      env:
        DATABASE_URL: postgresql://test:test@localhost/roadtrip_test
        REDIS_URL: redis://localhost:6379
    
    - name: Generate coverage report
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test:test@localhost/roadtrip_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: test-results/
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-coverage-report
        path: htmlcov/

  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mobile
        npm ci
    
    - name: Run linting
      run: |
        cd mobile
        npm run lint
    
    - name: Run type checking
      run: |
        cd mobile
        npm run type-check
    
    - name: Run tests
      run: |
        cd mobile
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mobile-test-results
        path: mobile/coverage/

  component-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, mobile-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Install mobile dependencies
      run: |
        cd mobile
        npm ci
    
    - name: Run component-specific tests
      run: |
        python run_tests.py --type specific -v
    
    - name: Test Summary
      if: always()
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Component Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Master Orchestration Agent ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Booking Agent ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Commission Calculator ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Revenue Analytics ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Voice Interactions ✅" >> $GITHUB_STEP_SUMMARY
        echo "- API Error Handling ✅" >> $GITHUB_STEP_SUMMARY