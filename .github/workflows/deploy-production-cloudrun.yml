name: Deploy to Production (Cloud Run)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: ai-roadtrip-storyteller-production
  REPOSITORY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/roadtrip-images/app

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Run pre-deployment checks
        run: |
          python scripts/validate_deployment.py --environment production --version ${{ steps.version.outputs.version }}

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.cloudrun
          push: true
          tags: |
            ${{ env.REPOSITORY }}:${{ needs.validate.outputs.version }}
            ${{ env.REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            COMMIT_SHA=${GITHUB_SHA}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REPOSITORY }}:${{ needs.validate.outputs.version }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --port 8000 \
            --cpu 4 \
            --memory 8Gi \
            --min-instances 3 \
            --max-instances 100 \
            --concurrency 1000 \
            --timeout 300 \
            --service-account ai-roadtrip-storyteller-production-run@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars "ENVIRONMENT=production,APP_VERSION=${{ needs.validate.outputs.version }}" \
            --vpc-connector ai-roadtrip-storyteller-production-connector \
            --vpc-egress all-traffic \
            --update-labels "version=${{ needs.validate.outputs.version }},environment=production,managed-by=github-actions" \
            --allow-unauthenticated
          
          # Get service URL
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "Deployed to: ${URL}"
      
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run health check
          curl -f "${{ steps.deploy.outputs.url }}/health" || exit 1
          
          # Run basic API tests
          python scripts/smoke_tests.py --url "${{ steps.deploy.outputs.url }}" --environment production

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Rollback to previous revision
        run: |
          # Get previous revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format "value(name)" \
            --limit 2 | tail -n 1)
          
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "Rolling back to revision: $PREVIOUS_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region ${{ env.REGION }} \
              --to-revisions $PREVIOUS_REVISION=100
          else
            echo "No previous revision found for rollback"
          fi
      
      - name: Send rollback notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,message,author
          custom_payload: |
            {
              username: 'GitHub Actions',
              icon_emoji: ':warning:',
              attachments: [{
                color: 'danger',
                title: 'Production Deployment Rolled Back',
                text: `Deployment of version ${{ needs.validate.outputs.version }} failed and was rolled back.`,
                fields: [
                  { title: 'Repository', value: '${{ github.repository }}', short: true },
                  { title: 'Version', value: '${{ needs.validate.outputs.version }}', short: true },
                  { title: 'Author', value: '${{ github.actor }}', short: true },
                  { title: 'Workflow', value: '${{ github.workflow }}', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: success()
    
    steps:
      - name: Send success notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,message,author
          custom_payload: |
            {
              username: 'GitHub Actions',
              icon_emoji: ':rocket:',
              attachments: [{
                color: 'good',
                title: 'Production Deployment Successful',
                text: `Version ${{ needs.validate.outputs.version }} has been deployed to production.`,
                fields: [
                  { title: 'Repository', value: '${{ github.repository }}', short: true },
                  { title: 'Version', value: '${{ needs.validate.outputs.version }}', short: true },
                  { title: 'Author', value: '${{ github.actor }}', short: true },
                  { title: 'URL', value: '${{ needs.deploy.outputs.url }}', short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}